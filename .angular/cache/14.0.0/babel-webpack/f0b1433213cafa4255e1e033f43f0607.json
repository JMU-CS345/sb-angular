{"ast":null,"code":"import { DataService } from '../data.service';\nimport { map } from 'rxjs/operators';\nimport { EpicsService } from '../epics.service';\nimport { callWithSnackBar } from '../util';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { IssuesService } from '../issues.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"../epics.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"../issues.service\";\nimport * as i5 from \"../issue-list/issue-list.component\";\nimport * as i6 from \"@angular/common\";\nexport let EpicIssueListComponent = /*#__PURE__*/(() => {\n  class EpicIssueListComponent {\n    constructor(dataService, epicsService, snackBar, issuesService) {\n      this.dataService = dataService;\n      this.epicsService = epicsService;\n      this.snackBar = snackBar;\n      this.issuesService = issuesService;\n      this.issues = new BehaviorSubject(null);\n    }\n\n    ngOnInit() {\n      this.dataService.load(`epics/${this.epic.id}/issues`, [`epics/${this.epic.id}`, `epics/${this.epic.id}/issues`, `epics/${this.epic.id}/issues/*`]);\n      this.dataSubscription = this.dataService.values[`epics/${this.epic.id}/issues`].pipe(map((value, index) => {\n        return value ? value.issues.list : null;\n      })).subscribe(x => {\n        this.issues.next(x);\n      });\n    }\n\n    ngOnDestroy() {\n      this.dataService.unload(`epics/${this.epic.id}/issues`, [`epics/${this.epic.id}`, `epics/${this.epic.id}/issues`, `epics/${this.epic.id}/issues/*`]);\n      this.dataSubscription.unsubscribe();\n    }\n\n    onReorder(reorderData) {\n      console.log(\"onReorder\");\n      let currentIssues = [...this.issues.value];\n      moveItemInArray(currentIssues, reorderData.fromIndex, reorderData.toIndex);\n      this.dataService.update(`epics/${this.epic.id}/issues`, {\n        issues: {\n          list: currentIssues\n        }\n      });\n      callWithSnackBar(this.snackBar, this.epicsService.reorderIssues(reorderData.container, reorderData.fromIndex, reorderData.toIndex), ['Updating Order...', 'Updated Order', 'Error Updating order']);\n    }\n\n    onTransfer(transferData) {\n      let epic1 = transferData.from.data.container;\n      let epic2 = transferData.to.data.container;\n\n      if (epic1) {\n        transferData.issue.epic = epic2;\n        callWithSnackBar(this.snackBar, this.issuesService.transfer({\n          epicId1: epic1.id,\n          epicId2: epic2.id,\n          fromIndex: transferData.fromIndex,\n          toIndex: transferData.toIndex\n        }), [\"Reordering...\", \"Reordering Complete\", \"Error While Reordering\"]);\n      }\n    }\n\n    removeIssue(issue) {\n      callWithSnackBar(this.snackBar, this.epicsService.removeIssue(this.epic, issue), [\"Removing From Epic\", \"Removed\", \"Error While Removing\"]);\n    }\n\n  }\n\n  EpicIssueListComponent.ɵfac = function EpicIssueListComponent_Factory(t) {\n    return new (t || EpicIssueListComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.EpicsService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.IssuesService));\n  };\n\n  EpicIssueListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EpicIssueListComponent,\n    selectors: [[\"sb-epic-issue-list\"]],\n    inputs: {\n      epic: \"epic\",\n      fixed: \"fixed\",\n      allowRemove: \"allowRemove\"\n    },\n    decls: 2,\n    vars: 6,\n    consts: [[\"showEmptyListSpace\", \"true\", 3, \"issues\", \"container\", \"allowRemove\", \"fixed\", \"reorder\", \"transfer\", \"issueRemoved\"]],\n    template: function EpicIssueListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sb-issue-list\", 0);\n        i0.ɵɵlistener(\"reorder\", function EpicIssueListComponent_Template_sb_issue_list_reorder_0_listener($event) {\n          return ctx.onReorder($event);\n        })(\"transfer\", function EpicIssueListComponent_Template_sb_issue_list_transfer_0_listener($event) {\n          return ctx.onTransfer($event);\n        })(\"issueRemoved\", function EpicIssueListComponent_Template_sb_issue_list_issueRemoved_0_listener($event) {\n          return ctx.removeIssue($event);\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"issues\", i0.ɵɵpipeBind1(1, 4, ctx.issues))(\"container\", ctx.epic)(\"allowRemove\", ctx.allowRemove)(\"fixed\", ctx.fixed);\n      }\n    },\n    dependencies: [i5.IssueListComponent, i6.AsyncPipe]\n  });\n  return EpicIssueListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}