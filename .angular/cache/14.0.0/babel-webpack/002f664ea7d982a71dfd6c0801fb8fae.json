{"ast":null,"code":"import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let NavigationService = /*#__PURE__*/(() => {\n  class NavigationService {\n    constructor(router, route) {\n      this.router = router;\n      this.route = route;\n      this.projectId = 0;\n      this.segment = 'projects';\n      this.selectedId = 0;\n      this.sub = this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => this.handleNavigation(event));\n    }\n\n    handleNavigation(event) {\n      let segments = event.url.substr(1).split('/');\n\n      if (segments.length > 1) {\n        this.projectId = +segments[1];\n      } else {\n        this.segment = 'projects';\n      }\n\n      if (segments.length > 2) {\n        this.segment = segments[2];\n      }\n\n      if (segments.length > 3) {\n        this.selectedId = +segments[3];\n      }\n\n      console.log(\"navigated to project \" + this.projectId);\n    }\n\n    go(segment, selectedId = 0) {\n      if (segment == 'projects') {\n        this.router.navigate(['projects']);\n        return;\n      }\n\n      console.log(`NavigationService.go(${segment}, ${selectedId}), project = ${this.projectId}`);\n\n      if (this.projectId == 0) {\n        return;\n      }\n\n      if (selectedId == 0) {\n        this.router.navigate(['projects', this.projectId, segment]);\n      } else {\n        this.router.navigate(['projects', this.projectId, segment, selectedId]);\n      }\n    }\n\n  }\n\n  NavigationService.ɵfac = function NavigationService_Factory(t) {\n    return new (t || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n  };\n\n  NavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavigationService,\n    factory: NavigationService.ɵfac,\n    providedIn: 'root'\n  });\n  return NavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}