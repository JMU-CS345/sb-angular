{"ast":null,"code":"import { LocationService } from '../location.service';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../location.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../data.service\";\nimport * as i4 from \"../sprint-planning/sprint-planning.component\";\nimport * as i5 from \"../sprint-loader/sprint-loader.component\";\nimport * as i6 from \"@angular/common\";\nexport let SprintPlanningTopLevelComponent = /*#__PURE__*/(() => {\n  class SprintPlanningTopLevelComponent {\n    constructor(locationService, route, dataService, router) {\n      this.locationService = locationService;\n      this.route = route;\n      this.dataService = dataService;\n      this.router = router;\n    }\n\n    ngOnInit() {\n      this.locationService.setTab('sprint-planning');\n      this.locationService.projectId = +this.route.snapshot.paramMap.get('id');\n      this.sprintId = +this.route.snapshot.paramMap.get('sprint_id');\n      this.dataService.load(`projects/${this.locationService.projectId}`, [`projects/${this.locationService.projectId}`]);\n      this.project = this.dataService.values[`projects/${this.locationService.projectId}`];\n      this.dataService.load(`projects/${this.locationService.projectId}/sprints?current=true`, [`projects/${this.locationService.projectId}/sprints`]);\n      this.sprints = this.dataService.values[`projects/${this.locationService.projectId}/sprints?current=true`];\n      this.sub = this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => this.handleNavigation(event));\n    }\n\n    ngOnDestroy() {\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n\n      this.dataService.unload(`projects/${this.locationService.projectId}`, [`projects/${this.locationService.projectId}`]);\n    }\n\n    handleNavigation(event) {\n      console.log(\"handleNavigation\");\n      this.locationService.projectId = +this.route.snapshot.paramMap.get('id');\n      this.unloadProject();\n      this.dataService.load(`projects/${this.locationService.projectId}`, [`projects/${this.locationService.projectId}`]);\n      this.project = this.dataService.values[`projects/${this.locationService.projectId}`];\n      this.sprintId = +this.route.snapshot.paramMap.get('sprint_id');\n    }\n\n    unloadProject() {\n      this.dataService.unload(`projects/${this.locationService.projectId}`, [`projects/${this.locationService.projectId}`]);\n    }\n\n  }\n\n  SprintPlanningTopLevelComponent.ɵfac = function SprintPlanningTopLevelComponent_Factory(t) {\n    return new (t || SprintPlanningTopLevelComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DataService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  SprintPlanningTopLevelComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SprintPlanningTopLevelComponent,\n    selectors: [[\"sb-sprint-planning-top-level\"]],\n    decls: 5,\n    vars: 7,\n    consts: [[3, \"sprintId\"], [3, \"project\", \"sprints\"], [\"sprintView\", \"\"]],\n    template: function SprintPlanningTopLevelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sb-sprint-loader\", 0);\n        i0.ɵɵelement(1, \"sb-sprint-planning\", 1, 2);\n        i0.ɵɵpipe(3, \"async\");\n        i0.ɵɵpipe(4, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵproperty(\"sprintId\", ctx.sprintId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"project\", i0.ɵɵpipeBind1(3, 3, ctx.project))(\"sprints\", (tmp_2_0 = i0.ɵɵpipeBind1(4, 5, ctx.sprints)) == null ? null : tmp_2_0.sprints == null ? null : tmp_2_0.sprints.list);\n      }\n    },\n    dependencies: [i4.SprintPlanningComponent, i5.SprintLoaderComponent, i6.AsyncPipe]\n  });\n  return SprintPlanningTopLevelComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}