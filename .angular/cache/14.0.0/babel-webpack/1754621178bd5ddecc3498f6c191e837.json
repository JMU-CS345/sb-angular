{"ast":null,"code":"import { Api } from './api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api\";\nexport let IssuesService = /*#__PURE__*/(() => {\n  class IssuesService {\n    constructor(api) {\n      this.api = api;\n    }\n\n    reorder(projectId, sprintId, order) {\n      if (!sprintId) {\n        this.api.patch('api/projects/' + projectId, {\n          project: {\n            order: order\n          }\n        }).subscribe();\n      } else {\n        this.api.patch('api/projects/' + projectId + '/sprints/' + sprintId, {\n          sprint: {\n            order: order\n          }\n        }).subscribe();\n      }\n    } // transfer(projectId1 : number, sprintId1 : number, order1 : string, projectId2: number, sprintId2: number, order2: string) : void {\n    //   console.log(`transfer ${projectId1}/${sprintId1} -> ${order1}, ${projectId2}/${sprintId2} -> ${order2}`);\n    //   this.http.patch('api/transfer_issues', { transfer: { projectId1: projectId1, sprintId1: sprintId1, order1: order1,\n    //                                            projectId2: projectId2, sprintId2: sprintId2, order2: order2 } }).subscribe();\n    // }\n\n\n    transfer(transfer_data) {\n      return this.api.patch('api/transfer_issues', {\n        transfer: transfer_data\n      });\n    }\n\n    save(issue) {\n      return this.api.patch(`api/issues/${issue.id}`, {\n        issue: issue\n      });\n    }\n\n    createIssue(issue) {\n      return this.api.post(`api/projects/${issue.project.id}/issues`, {\n        issue: issue\n      });\n    }\n\n    deleteIssue(issueId) {\n      return this.api.delete(`api/issues/${issueId}`);\n    }\n\n    updateState(issue, value) {\n      return this.api.patch(`api/issues/${issue.id}`, {\n        issue: {\n          id: issue.id,\n          state: value\n        }\n      });\n    }\n\n    reorderTasks(issue, fromIndex, toIndex) {\n      return this.api.patch(`api/issues/${issue.id}/reorder_tasks`, {\n        data: {\n          fromIndex: fromIndex,\n          toIndex: toIndex\n        }\n      });\n    }\n\n    assignIssue(issueId, userId) {\n      return this.api.patch(`api/issues/${issueId}/assign_issue`, {\n        data: {\n          userId: userId || -1\n        }\n      });\n    }\n\n    markCompleted(issueId) {\n      return this.api.patch(`api/issues/${issueId}/mark_complete`);\n    }\n\n    moveToBacklog(issueId) {\n      return this.api.patch(`api/issues/${issueId}/move_to_backlog`);\n    }\n\n    setACCompleted(issueId, acId, completed) {\n      return this.api.patch(`api/issues/${issueId}/set_ac_completed/${acId}`, {\n        acceptance_criterion: {\n          completed: completed\n        }\n      });\n    }\n\n    updateAcceptanceCriterion(issueId, acId, criterion) {\n      return this.api.patch(`api/issues/${issueId}/acceptance_criterion/${acId}`, {\n        acceptance_criterion: {\n          criterion: criterion\n        }\n      });\n    }\n\n    createAcceptanceCriterion(issueId, criterion) {\n      return this.api.post(`api/issues/${issueId}/add_acceptance_criterion`, {\n        acceptance_criterion: {\n          criterion: criterion\n        }\n      });\n    }\n\n    deleteAcceptanceCriterion(issueId, acId) {\n      return this.api.delete(`api/issues/${issueId}/remove_acceptance_criterion/${acId}`);\n    }\n\n    moveToSprint(issueId, sprintId) {\n      return this.api.patch(`api/issues/${issueId}/move_to_sprint/${sprintId}`);\n    }\n\n  }\n\n  IssuesService.ɵfac = function IssuesService_Factory(t) {\n    return new (t || IssuesService)(i0.ɵɵinject(i1.Api));\n  };\n\n  IssuesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IssuesService,\n    factory: IssuesService.ɵfac,\n    providedIn: 'root'\n  });\n  return IssuesService;\n})();","map":null,"metadata":{},"sourceType":"module"}