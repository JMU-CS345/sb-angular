{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { map } from 'rxjs/operators';\nimport { SprintsService } from '../sprints.service';\nimport { callWithSnackBar } from '../util';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\nimport { moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { Base } from '../base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"../sprints.service\";\nimport * as i4 from \"../issue-list/issue-list.component\";\nimport * as i5 from \"@angular/common\";\nexport let SprintIssueListComponent = /*#__PURE__*/(() => {\n  class SprintIssueListComponent extends Base {\n    constructor(dataService, snackBar, sprintsService) {\n      super();\n      this.dataService = dataService;\n      this.snackBar = snackBar;\n      this.sprintsService = sprintsService;\n      this.transfer = new EventEmitter();\n      this.issueSelected = new EventEmitter();\n      this.issues = new BehaviorSubject(null);\n      this.lastValue = null;\n    }\n\n    ngOnInit() {\n      this.dataService.load(`sprints/${this.sprint.id}/issues`, [`sprints/${this.sprint.id}`, `sprints/${this.sprint.id}/issues`, `sprints/${this.sprint.id}/issues/*`]);\n      this.dataSubscription = this.dataService.values[`sprints/${this.sprint.id}/issues`].pipe(map((value, index) => {\n        return value ? value.issues.list : null;\n      })).subscribe(x => {\n        this.lastValue = x;\n        this.issues.next(x);\n      });\n    }\n\n    ngOnDestroy() {\n      this.dataService.unload(`sprints/${this.sprint.id}/issues`, [`sprints/${this.sprint.id}`, `sprints/${this.sprint.id}/issues`, `sprints/${this.sprint.id}/issues/*`]);\n      this.dataSubscription.unsubscribe();\n    }\n\n    onReorder(reorderData) {\n      console.log(\"onReorder Sprint Issues\");\n      let currentIssues = [...this.issues.value];\n      moveItemInArray(currentIssues, reorderData.fromIndex, reorderData.toIndex);\n      this.dataService.update(`sprints/${this.sprint.id}/issues`, {\n        issues: {\n          list: currentIssues\n        }\n      });\n      callWithSnackBar(this.snackBar, this.sprintsService.reorderIssues(reorderData.container, reorderData.fromIndex, reorderData.toIndex), ['Updating Order...', 'Updated Order', 'Error Updating order']);\n    }\n\n    removeIssue(issue) {\n      let newValue = this.lastValue.filter(x => x.id != issue.id);\n      this.dataService.update(`sprints/${this.sprint.id}/issues`, {\n        issues: {\n          list: newValue\n        }\n      });\n      callWithSnackBar(this.snackBar, this.sprintsService.removeIssue(this.sprint, issue), [\"Removing From Epic\", \"Removed\", \"Error While Removing\"]);\n    }\n\n    onTransfer(transferData) {\n      this.transfer.emit(transferData);\n    }\n\n    onIssueSelected(issue) {\n      this.issueSelected.emit(issue);\n    }\n\n  }\n\n  SprintIssueListComponent.ɵfac = function SprintIssueListComponent_Factory(t) {\n    return new (t || SprintIssueListComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.SprintsService));\n  };\n\n  SprintIssueListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SprintIssueListComponent,\n    selectors: [[\"sb-sprint-issue-list\"]],\n    inputs: {\n      sprint: \"sprint\",\n      editable: \"editable\"\n    },\n    outputs: {\n      transfer: \"transfer\",\n      issueSelected: \"issueSelected\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 6,\n    consts: [[\"showEmptyListSpace\", \"true\", 3, \"issues\", \"container\", \"allowRemove\", \"fixed\", \"reorder\", \"transfer\", \"issueRemoved\", \"issueSelected\"]],\n    template: function SprintIssueListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sb-issue-list\", 0);\n        i0.ɵɵlistener(\"reorder\", function SprintIssueListComponent_Template_sb_issue_list_reorder_0_listener($event) {\n          return ctx.onReorder($event);\n        })(\"transfer\", function SprintIssueListComponent_Template_sb_issue_list_transfer_0_listener($event) {\n          return ctx.onTransfer($event);\n        })(\"issueRemoved\", function SprintIssueListComponent_Template_sb_issue_list_issueRemoved_0_listener($event) {\n          return ctx.removeIssue($event);\n        })(\"issueSelected\", function SprintIssueListComponent_Template_sb_issue_list_issueSelected_0_listener($event) {\n          return ctx.onIssueSelected($event);\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"issues\", i0.ɵɵpipeBind1(1, 4, ctx.issues))(\"container\", ctx.sprint)(\"allowRemove\", ctx.editable && ctx.permission(ctx.sprint, \"update\"))(\"fixed\", !ctx.editable);\n      }\n    },\n    dependencies: [i4.IssueListComponent, i5.AsyncPipe]\n  });\n  return SprintIssueListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}