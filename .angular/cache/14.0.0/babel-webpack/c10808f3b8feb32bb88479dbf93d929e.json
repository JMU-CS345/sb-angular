{"ast":null,"code":"import { EventEmitter, ElementRef } from '@angular/core';\nimport { Base } from '../base';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nconst _c0 = [\"titleInput\"];\n\nfunction SprintFormComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function SprintFormComponent_button_20_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.confirmDelete());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"Delete\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let SprintFormComponent = /*#__PURE__*/(() => {\n  class SprintFormComponent extends Base {\n    constructor(dialog, snackBar) {\n      super();\n      this.dialog = dialog;\n      this.snackBar = snackBar;\n      this.fb = new FormBuilder();\n      this.confirm = new EventEmitter();\n      this.cancel = new EventEmitter();\n      this.delete = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.sprint = this.sprint || {\n        id: -1,\n        title: '',\n        goal: '',\n        description: '',\n        project: {\n          id: 0,\n          name: \"foo\"\n        }\n      };\n      this.editSprintForm = this.fb.group({\n        title: new FormControl(this.sprint.title, Validators.compose([Validators.pattern(\".*[^\\\\s]+.*\"), Validators.required])),\n        goal: new FormControl(this.sprint.goal),\n        description: new FormControl(this.sprint.description)\n      });\n    }\n\n    ngAfterViewInit() {\n      this.titleInput.nativeElement.focus();\n    }\n\n    confirmEdit() {\n      this.sprint.title = this.editSprintForm.controls['title'].value;\n      this.sprint.goal = this.editSprintForm.controls['goal'].value;\n      this.sprint.description = this.editSprintForm.controls['description'].value;\n      this.confirm.emit(this.sprint);\n    }\n\n    cancelEdit() {\n      this.cancel.emit(this.sprint);\n    }\n\n    confirmDelete() {\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        maxWidth: \"400px\",\n        data: {\n          title: \"Are you sure?\",\n          message: `You are about to delete sprint '${this.sprint.title}'. All issues in the sprint backlog will be moved to the product backlog.`\n        }\n      }); // listen to response\n\n      dialogRef.afterClosed().subscribe(dialogResult => {\n        if (dialogResult) {\n          this.deleteSprint(this.sprint);\n        }\n      });\n    }\n\n    keyDown(event) {\n      let chrCode;\n      if (event.charCode) chrCode = event.charCode;else if (event.which) chrCode = event.which;else if (event.keyCode) chrCode = event.keyCode;\n\n      if (chrCode == 27) {\n        this.cancel.emit();\n      }\n    }\n\n    deleteSprint(sprint) {\n      this.delete.emit(sprint);\n    }\n\n  }\n\n  SprintFormComponent.ɵfac = function SprintFormComponent_Factory(t) {\n    return new (t || SprintFormComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n  };\n\n  SprintFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SprintFormComponent,\n    selectors: [[\"sb-sprint-form\"]],\n    viewQuery: function SprintFormComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleInput = _t.first);\n      }\n    },\n    inputs: {\n      mode: \"mode\",\n      sprint: \"sprint\"\n    },\n    outputs: {\n      confirm: \"confirm\",\n      cancel: \"cancel\",\n      delete: \"delete\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 29,\n    vars: 3,\n    consts: [[3, \"formGroup\"], [\"fxLayout\", \"row\"], [\"appearance\", \"fill\", 2, \"width\", \"100%\"], [\"matInput\", \"\", \"formControlName\", \"title\", 3, \"keydown\"], [\"titleInput\", \"\"], [\"matInput\", \"\", \"formControlName\", \"goal\", 3, \"keydown\"], [\"appearance\", \"fill\", 2, \"min-width\", \"100%\"], [\"formControlName\", \"description\", \"rows\", \"4\", \"matInput\", \"\", 3, \"keydown\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", \"class\", \"delete-button mr-2\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"reset\", \"mat-button\", \"\", \"type\", \"button\", 1, \"cancel-button\", \"mr-2\", 3, \"click\"], [\"mat-button\", \"\", \"type\", \"submit\", 1, \"save-button\", 3, \"disabled\", \"click\"], [\"mat-button\", \"\", \"type\", \"button\", 1, \"delete-button\", \"mr-2\", 3, \"click\"]],\n    template: function SprintFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Sprint Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 3, 4);\n        i0.ɵɵlistener(\"keydown\", function SprintFormComponent_Template_input_keydown_5_listener($event) {\n          return ctx.keyDown($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-error\");\n        i0.ɵɵtext(8, \"Title can't be blank\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"mat-form-field\", 2)(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Goal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"input\", 5);\n        i0.ɵɵlistener(\"keydown\", function SprintFormComponent_Template_input_keydown_13_listener($event) {\n          return ctx.keyDown($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 1)(15, \"mat-form-field\", 6)(16, \"mat-label\");\n        i0.ɵɵtext(17, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"textarea\", 7);\n        i0.ɵɵlistener(\"keydown\", function SprintFormComponent_Template_textarea_keydown_18_listener($event) {\n          return ctx.keyDown($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 8);\n        i0.ɵɵtemplate(20, SprintFormComponent_button_20_Template, 4, 0, \"button\", 9);\n        i0.ɵɵelementStart(21, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function SprintFormComponent_Template_button_click_21_listener() {\n          return ctx.cancelEdit();\n        });\n        i0.ɵɵelementStart(22, \"mat-icon\");\n        i0.ɵɵtext(23, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(24, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function SprintFormComponent_Template_button_click_25_listener() {\n          return ctx.confirmEdit();\n        });\n        i0.ɵɵelementStart(26, \"mat-icon\");\n        i0.ɵɵtext(27, \"save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(28, \"Save\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.editSprintForm);\n        i0.ɵɵadvance(20);\n        i0.ɵɵproperty(\"ngIf\", ctx.mode == \"edit\" && ctx.permission(ctx.sprint, \"delete\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", !ctx.editSprintForm.valid);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.MatIcon, i6.MatButton, i7.MatError, i7.MatFormField, i7.MatLabel, i8.MatInput, i1.MatDialogActions],\n    styles: [\"[_nghost-%COMP%]     .ck-editor__editable_inline{height:12rem;font-family:var(--user-font)}\"]\n  });\n  return SprintFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}