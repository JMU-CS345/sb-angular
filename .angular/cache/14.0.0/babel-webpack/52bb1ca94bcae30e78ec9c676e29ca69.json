{"ast":null,"code":"import { Component, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../data.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nconst _c0 = [\"issueView\"];\nconst _c1 = [\"*\"];\nexport let IssueLoaderComponent = /*#__PURE__*/(() => {\n  class IssueLoaderComponent {\n    constructor(dataService) {\n      this.dataService = dataService;\n    }\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n      this.updateData(this.issueId);\n    }\n\n    updateData(id) {\n      if (id == 0) {\n        return;\n      }\n\n      this.dataService.load(`issues/${id}`, [`issues/${id}`]);\n      this.sub = this.dataService.values[`issues/${id}`].subscribe(x => {\n        console.log(`loaded issue: ${x}`);\n        if (x == null) return;\n\n        if (this.components) {\n          this.components.toArray().forEach(component => {\n            component[\"issue\"] = x;\n          });\n        }\n      });\n    }\n\n    unloadData(id) {\n      this.dataService.unload(`issues/${id}`, [`issues/${id}`]);\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n    }\n\n    set issueId(value) {\n      if (this._issueId) {\n        this.unloadData(this._issueId);\n      }\n\n      this._issueId = value;\n\n      if (this._issueId) {\n        this.updateData(this._issueId);\n      }\n    }\n\n    get issueId() {\n      return this._issueId;\n    }\n\n    ngOnDestroy() {\n      this.unloadData(this._issueId);\n    }\n\n  }\n\n  IssueLoaderComponent.ɵfac = function IssueLoaderComponent_Factory(t) {\n    return new (t || IssueLoaderComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n\n  IssueLoaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IssueLoaderComponent,\n    selectors: [[\"sb-issue-loader\"]],\n    contentQueries: function IssueLoaderComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);\n      }\n    },\n    inputs: {\n      issueId: \"issueId\"\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function IssueLoaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    }\n  });\n  return IssueLoaderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}