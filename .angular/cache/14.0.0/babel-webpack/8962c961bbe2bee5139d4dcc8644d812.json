{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { transferArrayItem } from \"@angular/cdk/drag-drop\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../expandable-issue-list/expandable-issue-list.component\";\nexport let SprintIssueStateListComponent = /*#__PURE__*/(() => {\n  class SprintIssueStateListComponent {\n    constructor() {\n      this.transfer = new EventEmitter();\n      this.viewIssue = new EventEmitter();\n    }\n\n    ngOnInit() {}\n\n    filterFunction() {\n      let state = this.state;\n      return value => value.filter(x => x.state == state);\n    }\n\n    onTransfer(event) {\n      transferArrayItem(event.from.data.issues, event.to.data.issues, event.fromIndex, event.toIndex);\n      this.transfer.emit(event.issue);\n    }\n\n    onViewIssue(issue) {\n      this.viewIssue.emit(issue);\n    }\n\n  }\n\n  SprintIssueStateListComponent.ɵfac = function SprintIssueStateListComponent_Factory(t) {\n    return new (t || SprintIssueStateListComponent)();\n  };\n\n  SprintIssueStateListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SprintIssueStateListComponent,\n    selectors: [[\"sb-sprint-issue-state-list\"]],\n    inputs: {\n      issues: \"issues\",\n      state: \"state\"\n    },\n    outputs: {\n      transfer: \"transfer\",\n      viewIssue: \"viewIssue\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[\"showViewIcon\", \"true\", 3, \"issues\", \"filter\", \"transfer\", \"viewIssue\"]],\n    template: function SprintIssueStateListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sb-expandable-issue-list\", 0);\n        i0.ɵɵlistener(\"transfer\", function SprintIssueStateListComponent_Template_sb_expandable_issue_list_transfer_0_listener($event) {\n          return ctx.onTransfer($event);\n        })(\"viewIssue\", function SprintIssueStateListComponent_Template_sb_expandable_issue_list_viewIssue_0_listener($event) {\n          return ctx.onViewIssue($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"issues\", ctx.issues)(\"filter\", ctx.filterFunction());\n      }\n    },\n    dependencies: [i1.ExpandableIssueListComponent]\n  });\n  return SprintIssueStateListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}