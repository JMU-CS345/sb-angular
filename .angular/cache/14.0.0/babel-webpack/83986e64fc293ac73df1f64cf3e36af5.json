{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { THEMES, ACTIVE_THEME } from './symbols';\nimport { CookieService } from 'ngx-cookie';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(themes, theme, cookieService) {\n      this.themes = themes;\n      this.theme = theme;\n      this.cookieService = cookieService;\n      this.themeChange = new EventEmitter();\n      let themeName = this.cookieService.get(\"themeName\");\n      this.setTheme(themeName || 'jmu');\n    }\n\n    getTheme(name) {\n      const theme = this.themes.find(t => t.name === name);\n\n      if (!theme) {\n        throw new Error(`Theme not found: '${name}'`);\n      }\n\n      return theme;\n    }\n\n    getActiveTheme() {\n      if (this.theme) {\n        return this.getTheme(this.theme);\n      }\n    }\n\n    getProperty(propName) {\n      return this.getActiveTheme().properties[propName];\n    }\n\n    setTheme(name) {\n      this.cookieService.put(\"themeName\", name);\n      this.theme = name;\n      this.themeChange.emit(this.getActiveTheme());\n    }\n\n    registerTheme(theme) {\n      this.themes.push(theme);\n    }\n\n    updateTheme(name, properties) {\n      const theme = this.getTheme(name);\n      theme.properties = Object.assign(Object.assign({}, theme.properties), properties);\n\n      if (name === this.theme) {\n        this.themeChange.emit(theme);\n      }\n    }\n\n  }\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)(i0.ɵɵinject(THEMES), i0.ɵɵinject(ACTIVE_THEME), i0.ɵɵinject(i1.CookieService));\n  };\n\n  ThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module"}