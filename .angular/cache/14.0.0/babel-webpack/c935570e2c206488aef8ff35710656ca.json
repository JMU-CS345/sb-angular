{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { Base } from '../base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/progress-spinner\";\nimport * as i4 from \"../sprint-card/sprint-card.component\";\nimport * as i5 from \"../sprint-loader/sprint-loader.component\";\n\nfunction SprintListComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction SprintListComponent_div_2_sb_sprint_loader_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"sb-sprint-loader\", 4)(1, \"app-sprint-card\", 5, 6);\n    i0.ɵɵlistener(\"transfer\", function SprintListComponent_div_2_sb_sprint_loader_1_Template_app_sprint_card_transfer_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onTransfer($event));\n    })(\"selected\", function SprintListComponent_div_2_sb_sprint_loader_1_Template_app_sprint_card_selected_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onSprintSelected($event));\n    })(\"start\", function SprintListComponent_div_2_sb_sprint_loader_1_Template_app_sprint_card_start_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onStart($event));\n    })(\"issueSelected\", function SprintListComponent_div_2_sb_sprint_loader_1_Template_app_sprint_card_issueSelected_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onIssueSelected($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sprint_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"sprintId\", sprint_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"project\", ctx_r3.project)(\"showStartButton\", ctx_r3.showStartButton && ctx_r3.permission(sprint_r4, \"start\"))(\"editable\", ctx_r3.editable);\n  }\n}\n\nfunction SprintListComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, SprintListComponent_div_2_sb_sprint_loader_1_Template, 3, 4, \"sb-sprint-loader\", 3);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r2.sprints).sprints.list);\n  }\n}\n\nexport let SprintListComponent = /*#__PURE__*/(() => {\n  class SprintListComponent extends Base {\n    constructor(dataService) {\n      super();\n      this.dataService = dataService;\n      this.transfer = new EventEmitter();\n      this.selected = new EventEmitter();\n      this.start = new EventEmitter();\n      this.loaded = new EventEmitter();\n      this.issueSelected = new EventEmitter();\n      this.isLoaded = false;\n    }\n\n    ngOnInit() {\n      this.updateData();\n    }\n\n    ngOnDestroy() {\n      this.dataService.unload(this.lastDataPath, [`projects/${this.project.id}/sprints`, `projects/${this.project.id}/sprints/*`]);\n    }\n\n    set currentOnly(value) {\n      this._currentOnly = value;\n      this.updateData();\n    }\n\n    get currentOnly() {\n      return this._currentOnly;\n    }\n\n    set completedOnly(value) {\n      this._completedOnly = value;\n      this.updateData();\n    }\n\n    get completedOnly() {\n      return this._completedOnly;\n    }\n\n    updateData() {\n      if (this.lastDataPath) {\n        this.dataService.unload(this.lastDataPath, [`projects/${this.project.id}/sprints`, `projects/${this.project.id}/sprints/*`]);\n      }\n\n      var newDataPath = `projects/${this.project.id}/sprints`;\n\n      if (this.currentOnly) {\n        newDataPath += '?current=true';\n      } else {\n        newDataPath += '?completed=true';\n      }\n\n      this.dataService.load(newDataPath, [`projects/${this.project.id}/sprints`, `projects/${this.project.id}/sprints/*`]);\n      this.sprints = this.dataService.values[newDataPath];\n      this.sprints.subscribe(x => {\n        if (!this.isLoaded && x != null) {\n          console.log(x);\n          let lastSprint = x.sprints.list[0];\n          this.isLoaded = true;\n          this.loaded.emit(lastSprint);\n        }\n      });\n      this.lastDataPath = newDataPath;\n    }\n\n    onTransfer(transferData) {\n      this.transfer.emit(transferData);\n    }\n\n    onSprintSelected(sprint) {\n      console.log(`sprintSelected: ${sprint.id}`);\n      this.selected.emit(sprint);\n    }\n\n    onStart(sprint) {\n      this.start.emit(sprint);\n    }\n\n    onIssueSelected(issue) {\n      this.issueSelected.emit(issue);\n    }\n\n  }\n\n  SprintListComponent.ɵfac = function SprintListComponent_Factory(t) {\n    return new (t || SprintListComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n\n  SprintListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SprintListComponent,\n    selectors: [[\"sb-sprint-list\"]],\n    inputs: {\n      project: \"project\",\n      showStartButton: \"showStartButton\",\n      editable: \"editable\",\n      currentOnly: \"currentOnly\",\n      completedOnly: \"completedOnly\"\n    },\n    outputs: {\n      transfer: \"transfer\",\n      selected: \"selected\",\n      start: \"start\",\n      loaded: \"loaded\",\n      issueSelected: \"issueSelected\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 4,\n    consts: [[\"progressSpinner\", \"\"], [\"class\", \"scroller\", 4, \"ngIf\", \"ngIfElse\"], [1, \"scroller\"], [3, \"sprintId\", 4, \"ngFor\", \"ngForOf\"], [3, \"sprintId\"], [3, \"project\", \"showStartButton\", \"editable\", \"transfer\", \"selected\", \"start\", \"issueSelected\"], [\"sprintView\", \"\"]],\n    template: function SprintListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SprintListComponent_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(2, SprintListComponent_div_2_Template, 3, 3, \"div\", 1);\n        i0.ɵɵpipe(3, \"async\");\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 2, ctx.sprints))(\"ngIfElse\", _r0);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.MatSpinner, i4.SprintCardComponent, i5.SprintLoaderComponent, i2.AsyncPipe]\n  });\n  return SprintListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}