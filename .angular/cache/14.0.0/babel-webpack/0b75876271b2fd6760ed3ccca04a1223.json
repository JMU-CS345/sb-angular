{"ast":null,"code":"import { Router, NavigationEnd } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(router) {\n      this.router = router;\n      this.breadcrumb = {\n        path: [],\n        links: []\n      };\n      this.menuItem = \"projects\";\n      this.tab = 'projects';\n      this.navLinks = [{\n        label: 'Projects',\n        link: '/projects',\n        icon: 'fa-shapes',\n        active: false,\n        disabled: false,\n        tab: 'projects'\n      }, {\n        label: 'Dashboard',\n        link: this.project_dashboard(),\n        icon: 'fa-tachometer-alt',\n        active: false,\n        disabled: true,\n        tab: 'dashboard'\n      }, {\n        label: 'Epics',\n        link: this.project_epics(),\n        icon: 'fa-scroll',\n        active: false,\n        disabled: true,\n        tab: 'epics'\n      }, {\n        label: 'Product Backlog',\n        link: `/projects/${this.projectId}/backlog`,\n        icon: 'fa-list-alt',\n        active: false,\n        disabled: true,\n        tab: 'product-backlog'\n      }, {\n        label: 'Sprint Planning',\n        link: `/projects/${this.projectId}/planning`,\n        icon: 'fa-drafting-compass',\n        active: false,\n        disabled: true,\n        tab: 'sprint-planning'\n      }, {\n        label: 'Sprint Execution',\n        link: `/projects/${this.projectId}/execution`,\n        icon: 'fa-hard-hat',\n        active: false,\n        disabled: true,\n        tab: 'sprint-execution'\n      }, {\n        label: 'Sprint Retrospective',\n        link: `/projects/${this.projectId}/retrospective`,\n        icon: 'fa-hourglass-end',\n        active: false,\n        disabled: true,\n        tab: 'sprint-retrospective'\n      }];\n      this.router.events.subscribe(res => {\n        if (res instanceof NavigationEnd) {\n          this.rebuildNavLinks();\n        }\n      });\n      this.rebuildNavLinks();\n    }\n\n    setTab(tabName) {\n      this.tab = tabName;\n    }\n\n    projects() {\n      return '/projects';\n    }\n\n    profile() {\n      return '/projects/profile';\n    }\n\n    settings() {\n      return '/projects/settings';\n    }\n\n    project_dashboard() {\n      return `/projects/${this.projectId}/dashboard`;\n    }\n\n    project_info() {\n      return `/projects/${this.projectId}/backlog`;\n    }\n\n    project_team() {\n      return `/projects/${this.projectId}/team`;\n    }\n\n    project_epics() {\n      return `/projects/${this.projectId}/epics`;\n    }\n\n    project_issues() {\n      return `/projects/${this.projectId}/foo`;\n    }\n\n    project_sprints() {\n      return `/projects/${this.projectId}/sprints`;\n    }\n\n    issue_detail() {\n      return `/projects/${this.projectId}/issues`;\n    }\n\n    sprint_issues() {\n      return `/projects/${this.projectId}/sprints/${this.sprintId}`;\n    }\n\n    sprint_info() {\n      return `/projects/${this.projectId}/sprints/${this.sprintId}/info`;\n    }\n\n    sprint_analytics() {\n      return `/projects/${this.projectId}/sprints/${this.sprintId}/analytics`;\n    }\n\n    get projectId() {\n      return this._projectId;\n    }\n\n    set projectId(newId) {\n      this._projectId = newId;\n      this.rebuildNavLinks();\n    }\n\n    rebuildNavLinks() {\n      this.navLinks[0].active = this.tab == 'projects';\n\n      if (this.projectId) {\n        this.navLinks[1].link = this.project_dashboard();\n        this.navLinks[2].link = this.project_epics();\n        this.navLinks[3].link = `/projects/${this.projectId}/backlog`;\n        this.navLinks[4].link = `/projects/${this.projectId}/planning`;\n        this.navLinks[5].link = `/projects/${this.projectId}/execution`;\n        this.navLinks[6].link = `/projects/${this.projectId}/retrospective`;\n\n        for (let i = 1; i < this.navLinks.length; i++) {\n          this.navLinks[i].disabled = false;\n          this.navLinks[i].active = this.tab == this.navLinks[i].tab;\n        }\n      } else {\n        for (let i = 1; i < this.navLinks.length; i++) {// this.navLinks[i].disabled = true;\n          // this.navLinks[i].active = false;\n        }\n      }\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.Router));\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}