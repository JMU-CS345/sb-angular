{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/a11y\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-color-picker\";\nexport let ColorPickerFormControlComponent = /*#__PURE__*/(() => {\n  class ColorPickerFormControlComponent {\n    constructor(_focusMonitor, _elementRef, ngControl) {\n      this._focusMonitor = _focusMonitor;\n      this._elementRef = _elementRef;\n      this.ngControl = ngControl;\n      this.stateChanges = new Subject();\n      this.focused = false;\n      this.controlType = 'color-picker-component';\n      this.id = `color-picker-component-${ColorPickerFormControlComponent.nextId++}`;\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n\n      this._required = false;\n      this._disabled = false;\n      this._value = \"\";\n\n      _focusMonitor.monitor(_elementRef, true).subscribe(origin => {\n        if (this.focused && !origin) {\n          this.onTouched();\n        }\n\n        this.focused = !!origin;\n        this.stateChanges.next();\n      });\n\n      if (this.ngControl != null) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n\n    ngOnInit() {}\n\n    get empty() {\n      return this.value == undefined || this.value == null || this.value.length == 0;\n    }\n\n    get shouldLabelFloat() {\n      return true;\n    }\n\n    get placeholder() {\n      return this._placeholder;\n    }\n\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n\n    get value() {\n      // console.log(\"get value = \" + this._value);\n      return this._value;\n    }\n\n    set value(val) {\n      console.log(\"color picker set value = \" + val);\n      this._value = val;\n      this.stateChanges.next();\n      this.onChange(val);\n    }\n\n    get errorState() {\n      return false;\n    }\n\n    autoFocusNext(control, nextElement) {\n      if (!control.errors && nextElement) {\n        this._focusMonitor.focusVia(nextElement, 'program');\n      }\n    }\n\n    autoFocusPrev(control, prevElement) {\n      if (control.value.length < 1) {\n        this._focusMonitor.focusVia(prevElement, 'program');\n      }\n    }\n\n    ngOnDestroy() {\n      this.stateChanges.complete();\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    setDescribedByIds(ids) {}\n\n    onContainerClick() {}\n\n    writeValue(val) {\n      this.value = val;\n    }\n\n    registerOnChange(fn) {\n      console.log(\"registerOnChange\");\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  ColorPickerFormControlComponent.nextId = 0;\n\n  ColorPickerFormControlComponent.ɵfac = function ColorPickerFormControlComponent_Factory(t) {\n    return new (t || ColorPickerFormControlComponent)(i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n  };\n\n  ColorPickerFormControlComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ColorPickerFormControlComponent,\n    selectors: [[\"sb-color-picker\"]],\n    hostVars: 3,\n    hostBindings: function ColorPickerFormControlComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n        i0.ɵɵclassProp(\"example-floating\", ctx.shouldLabelFloat);\n      }\n    },\n    inputs: {\n      userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n      placeholder: \"placeholder\",\n      required: \"required\",\n      disabled: \"disabled\",\n      value: \"value\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: ColorPickerFormControlComponent\n    }])],\n    decls: 1,\n    vars: 3,\n    consts: [[3, \"colorPicker\", \"colorPickerChange\"]],\n    template: function ColorPickerFormControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0);\n        i0.ɵɵlistener(\"colorPickerChange\", function ColorPickerFormControlComponent_Template_input_colorPickerChange_0_listener($event) {\n          return ctx.value = $event;\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"background\", ctx.value);\n        i0.ɵɵproperty(\"colorPicker\", ctx.value);\n      }\n    },\n    dependencies: [i3.ColorPickerDirective]\n  });\n  return ColorPickerFormControlComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}