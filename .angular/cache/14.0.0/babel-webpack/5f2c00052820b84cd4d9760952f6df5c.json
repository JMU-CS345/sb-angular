{"ast":null,"code":"import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { InfoDialogComponent } from '../info-dialog/info-dialog.component';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/checkbox\";\nimport * as i10 from \"@angular/material/datepicker\";\n\nfunction StartSprintComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 8);\n    i0.ɵɵtext(2, \"End Date must be after Start Date\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst dateValidator = fg => {\n  const start = fg.get('startDate').value;\n  const end = fg.get('endDate').value;\n  return start !== null && end !== null && start < end ? null : {\n    range: true\n  };\n};\n\nexport let StartSprintComponent = /*#__PURE__*/(() => {\n  class StartSprintComponent {\n    constructor(dialogRef, data, dialog) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.dialog = dialog;\n      this.fb = new FormBuilder();\n    }\n\n    ngOnInit() {\n      this.startSprintForm = this.fb.group({\n        startDate: new FormControl(this.data.sprint.start_date, Validators.required),\n        endDate: new FormControl(this.data.sprint.end_date, Validators.required),\n        reset: new FormControl(false)\n      }, {\n        validator: dateValidator\n      });\n    }\n\n    onDismiss() {\n      this.dialogRef.close(false);\n    }\n\n    onConfirm() {\n      this.data.sprint.start_date = this.startSprintForm.get('startDate').value;\n      this.data.sprint.end_date = this.startSprintForm.get('endDate').value;\n      this.data.reset = this.startSprintForm.get('reset').value;\n      console.log(`this.data.reset = ${this.data.reset}`);\n      this.dialogRef.close(true);\n    }\n\n    showResetHelp() {\n      this.dialog.open(InfoDialogComponent, {\n        maxWidth: \"600px\",\n        data: {\n          title: \"Help\",\n          message: \"When this box is checked, all previous burndown data will be cleared, and the burndown will start fresh.\"\n        }\n      });\n    }\n\n    hasBurndownData(sprint) {\n      return sprint.hasOwnProperty(\"burndownData\") && sprint.burndownData && sprint.burndownData.ideal;\n    }\n\n  }\n\n  StartSprintComponent.ɵfac = function StartSprintComponent_Factory(t) {\n    return new (t || StartSprintComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialog));\n  };\n\n  StartSprintComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StartSprintComponent,\n    selectors: [[\"sb-start-sprint\"]],\n    decls: 34,\n    vars: 8,\n    consts: [[\"fxLayoutGap\", \"\"], [\"mat-dialog-title\", \"\", 1, \"banner-text\"], [3, \"formGroup\"], [\"fxLayout\", \"row\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"startDate\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"startpicker\", \"\"], [1, \"errorMessage\"], [\"matInput\", \"\", \"formControlName\", \"endDate\", 3, \"matDatepicker\"], [\"endpicker\", \"\"], [4, \"ngIf\"], [3, \"hidden\"], [\"formControlName\", \"reset\", 1, \"menu-text\"], [3, \"click\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 1, \"cancel-button\", 3, \"click\"], [\"mat-raised-button\", \"\", 1, \"menu-text-bold\", \"save-button\", 3, \"disabled\", \"click\"]],\n    template: function StartSprintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"p\", 1);\n        i0.ɵɵtext(2, \"Start Sprint\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2)(4, \"div\", 3)(5, \"mat-form-field\", 4)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Start Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5)(9, \"mat-datepicker-toggle\", 6)(10, \"mat-datepicker\", null, 7);\n        i0.ɵɵelementStart(12, \"mat-error\", 8);\n        i0.ɵɵtext(13, \"Start Date is required\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"mat-form-field\", 4)(15, \"mat-label\");\n        i0.ɵɵtext(16, \"End Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 9)(18, \"mat-datepicker-toggle\", 6)(19, \"mat-datepicker\", null, 10);\n        i0.ɵɵelementStart(21, \"mat-error\");\n        i0.ɵɵtext(22, \"End Date is required\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(23, StartSprintComponent_div_23_Template, 3, 0, \"div\", 11);\n        i0.ɵɵelementStart(24, \"div\", 12)(25, \"mat-checkbox\", 13);\n        i0.ɵɵtext(26, \"Reset Burndown\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-icon\", 14);\n        i0.ɵɵlistener(\"click\", function StartSprintComponent_Template_mat_icon_click_27_listener() {\n          return ctx.showResetHelp();\n        });\n        i0.ɵɵtext(28, \"help\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(29, \"div\", 15)(30, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function StartSprintComponent_Template_button_click_30_listener() {\n          return ctx.onDismiss();\n        });\n        i0.ɵɵtext(31, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function StartSprintComponent_Template_button_click_32_listener() {\n          return ctx.onConfirm();\n        });\n        i0.ɵɵtext(33, \"Start\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(11);\n\n        const _r1 = i0.ɵɵreference(20);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.startSprintForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"matDatepicker\", _r0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r0);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matDatepicker\", _r1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r1);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (ctx.startSprintForm.errors == null ? null : ctx.startSprintForm.errors.range) && ctx.startSprintForm.get(\"startDate\").value && ctx.startSprintForm.get(\"endDate\").value && ctx.startSprintForm.touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.hasBurndownData(ctx.data.sprint) || !ctx.data.sprint.started);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"disabled\", !ctx.startSprintForm.valid);\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.MatCard, i5.MatIcon, i6.MatButton, i7.MatError, i7.MatFormField, i7.MatLabel, i7.MatSuffix, i8.MatInput, i1.MatDialogTitle, i1.MatDialogActions, i9.MatCheckbox, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle],\n    styles: [\".errorMessage[_ngcontent-%COMP%]{color:var(--error)!important}.start-button[_ngcontent-%COMP%]{background-color:var(--warning);color:var(--on-warning)}\"]\n  });\n  return StartSprintComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}